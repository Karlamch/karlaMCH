{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOyH0UscT8TpWKelw9X7MpN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Karlamch/karlaMCH/blob/main/eii_u2_04_%3C22150453%3E\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 790
        },
        "id": "_6vUnaKMzh5l",
        "outputId": "8a04479d-4063-4929-83ae-0b436bf883b6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Timestamp  Asset_ID  Latitude  Longitude  Inventory_Level  \\\n",
              "1    2024-10-30 07:53:51   Truck_6   22.2748  -131.7086              491   \n",
              "3    2024-10-28 00:50:54   Truck_9   42.3900    -1.4788              330   \n",
              "7    2024-09-28 09:08:23   Truck_9   46.5643  -126.5348              222   \n",
              "9    2024-11-09 00:48:26   Truck_2   54.1683  -135.2676              389   \n",
              "11   2024-02-02 22:28:16  Truck_10  -25.2768   156.1262              234   \n",
              "..                   ...       ...       ...        ...              ...   \n",
              "993  2024-10-14 10:21:17   Truck_4   46.9729   -36.5198              420   \n",
              "994  2024-06-13 00:29:04   Truck_1   44.2477   175.0702              143   \n",
              "995  2024-07-22 16:30:00   Truck_6   89.8701    73.6867              264   \n",
              "996  2024-04-30 04:58:58   Truck_5  -10.4792  -177.1239              479   \n",
              "999  2024-09-18 19:39:24   Truck_8   59.8356  -114.4198              157   \n",
              "\n",
              "    Shipment_Status  Temperature  Humidity Traffic_Status  Waiting_Time  \\\n",
              "1        In Transit         22.5      54.3          Heavy            16   \n",
              "3         Delivered         25.4      52.3          Heavy            37   \n",
              "7        In Transit         23.3      64.2         Detour            30   \n",
              "9        In Transit         21.9      57.3          Clear            52   \n",
              "11        Delivered         29.7      63.6         Detour            13   \n",
              "..              ...          ...       ...            ...           ...   \n",
              "993         Delayed         21.6      62.8          Clear            31   \n",
              "994       Delivered         21.6      64.1         Detour            32   \n",
              "995       Delivered         26.9      70.0          Heavy            32   \n",
              "996       Delivered         23.7      77.9         Detour            56   \n",
              "999         Delayed         18.7      73.6          Clear            55   \n",
              "\n",
              "     User_Transaction_Amount  User_Purchase_Frequency Logistics_Delay_Reason  \\\n",
              "1                        439                        7                Weather   \n",
              "3                        227                        5                Traffic   \n",
              "7                        459                        9                Traffic   \n",
              "9                        127                        7     Mechanical Failure   \n",
              "11                       406                       10                Traffic   \n",
              "..                       ...                      ...                    ...   \n",
              "993                      242                       10                Weather   \n",
              "994                      307                       10                Traffic   \n",
              "995                      188                        1                Weather   \n",
              "996                      276                        7                Weather   \n",
              "999                      323                        9     Mechanical Failure   \n",
              "\n",
              "     Asset_Utilization  Demand_Forecast  Logistics_Delay  \n",
              "1                 80.9              174                1  \n",
              "3                 97.4              160                1  \n",
              "7                 73.8              253                0  \n",
              "9                 63.1              224                0  \n",
              "11                85.5              238                0  \n",
              "..                 ...              ...              ...  \n",
              "993               95.6              221                1  \n",
              "994               64.0              168                0  \n",
              "995               79.2              213                1  \n",
              "996               83.7              272                0  \n",
              "999               81.3              141                1  \n",
              "\n",
              "[737 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-456696e2-6fb6-4b00-a27c-cf7c92a73d00\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Shipment_Status</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Traffic_Status</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>User_Purchase_Frequency</th>\n",
              "      <th>Logistics_Delay_Reason</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2024-10-30 07:53:51</td>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>In Transit</td>\n",
              "      <td>22.5</td>\n",
              "      <td>54.3</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2024-10-28 00:50:54</td>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>25.4</td>\n",
              "      <td>52.3</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>5</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2024-09-28 09:08:23</td>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>In Transit</td>\n",
              "      <td>23.3</td>\n",
              "      <td>64.2</td>\n",
              "      <td>Detour</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>9</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2024-11-09 00:48:26</td>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>In Transit</td>\n",
              "      <td>21.9</td>\n",
              "      <td>57.3</td>\n",
              "      <td>Clear</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>7</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2024-02-02 22:28:16</td>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>29.7</td>\n",
              "      <td>63.6</td>\n",
              "      <td>Detour</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>2024-10-14 10:21:17</td>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>Delayed</td>\n",
              "      <td>21.6</td>\n",
              "      <td>62.8</td>\n",
              "      <td>Clear</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>10</td>\n",
              "      <td>Weather</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>2024-06-13 00:29:04</td>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>21.6</td>\n",
              "      <td>64.1</td>\n",
              "      <td>Detour</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>2024-07-22 16:30:00</td>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>26.9</td>\n",
              "      <td>70.0</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>1</td>\n",
              "      <td>Weather</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>2024-04-30 04:58:58</td>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>23.7</td>\n",
              "      <td>77.9</td>\n",
              "      <td>Detour</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>2024-09-18 19:39:24</td>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>Delayed</td>\n",
              "      <td>18.7</td>\n",
              "      <td>73.6</td>\n",
              "      <td>Clear</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>9</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-456696e2-6fb6-4b00-a27c-cf7c92a73d00')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-456696e2-6fb6-4b00-a27c-cf7c92a73d00 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-456696e2-6fb6-4b00-a27c-cf7c92a73d00');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9bef668a-0c6a-47ff-bf1d-ade31aaacb61\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bef668a-0c6a-47ff-bf1d-ade31aaacb61')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9bef668a-0c6a-47ff-bf1d-ade31aaacb61 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_785eae88-9313-4688-9456-5628627c6c47\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_785eae88-9313-4688-9456-5628627c6c47 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "df =pd.read_csv(\"https://raw.githubusercontent.com/Karlamch/karlaMCH/refs/heads/main/smart_logistics_dataset.csv\")\n",
        "df.dropna(inplace = True)\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Timestamp*"
      ],
      "metadata": {
        "id": "aQZ0RS2B36sT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns=[\"Timestamp\"],inplace=True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "1qSYF6XZ4Gfi",
        "outputId": "413c0209-3349-4d9e-bfc4-8cd4bb359b06"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level Shipment_Status  \\\n",
              "1     Truck_6   22.2748  -131.7086              491      In Transit   \n",
              "3     Truck_9   42.3900    -1.4788              330       Delivered   \n",
              "7     Truck_9   46.5643  -126.5348              222      In Transit   \n",
              "9     Truck_2   54.1683  -135.2676              389      In Transit   \n",
              "11   Truck_10  -25.2768   156.1262              234       Delivered   \n",
              "..        ...       ...        ...              ...             ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         Delayed   \n",
              "994   Truck_1   44.2477   175.0702              143       Delivered   \n",
              "995   Truck_6   89.8701    73.6867              264       Delivered   \n",
              "996   Truck_5  -10.4792  -177.1239              479       Delivered   \n",
              "999   Truck_8   59.8356  -114.4198              157         Delayed   \n",
              "\n",
              "     Temperature  Humidity Traffic_Status  Waiting_Time  \\\n",
              "1           22.5      54.3          Heavy            16   \n",
              "3           25.4      52.3          Heavy            37   \n",
              "7           23.3      64.2         Detour            30   \n",
              "9           21.9      57.3          Clear            52   \n",
              "11          29.7      63.6         Detour            13   \n",
              "..           ...       ...            ...           ...   \n",
              "993         21.6      62.8          Clear            31   \n",
              "994         21.6      64.1         Detour            32   \n",
              "995         26.9      70.0          Heavy            32   \n",
              "996         23.7      77.9         Detour            56   \n",
              "999         18.7      73.6          Clear            55   \n",
              "\n",
              "     User_Transaction_Amount  User_Purchase_Frequency Logistics_Delay_Reason  \\\n",
              "1                        439                        7                Weather   \n",
              "3                        227                        5                Traffic   \n",
              "7                        459                        9                Traffic   \n",
              "9                        127                        7     Mechanical Failure   \n",
              "11                       406                       10                Traffic   \n",
              "..                       ...                      ...                    ...   \n",
              "993                      242                       10                Weather   \n",
              "994                      307                       10                Traffic   \n",
              "995                      188                        1                Weather   \n",
              "996                      276                        7                Weather   \n",
              "999                      323                        9     Mechanical Failure   \n",
              "\n",
              "     Asset_Utilization  Demand_Forecast  Logistics_Delay  \n",
              "1                 80.9              174                1  \n",
              "3                 97.4              160                1  \n",
              "7                 73.8              253                0  \n",
              "9                 63.1              224                0  \n",
              "11                85.5              238                0  \n",
              "..                 ...              ...              ...  \n",
              "993               95.6              221                1  \n",
              "994               64.0              168                0  \n",
              "995               79.2              213                1  \n",
              "996               83.7              272                0  \n",
              "999               81.3              141                1  \n",
              "\n",
              "[737 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2cc5c98a-df07-48c3-86b8-2bcca4a752f9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Shipment_Status</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Traffic_Status</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>User_Purchase_Frequency</th>\n",
              "      <th>Logistics_Delay_Reason</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>In Transit</td>\n",
              "      <td>22.5</td>\n",
              "      <td>54.3</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>25.4</td>\n",
              "      <td>52.3</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>5</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>In Transit</td>\n",
              "      <td>23.3</td>\n",
              "      <td>64.2</td>\n",
              "      <td>Detour</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>9</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>In Transit</td>\n",
              "      <td>21.9</td>\n",
              "      <td>57.3</td>\n",
              "      <td>Clear</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>7</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>29.7</td>\n",
              "      <td>63.6</td>\n",
              "      <td>Detour</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>Delayed</td>\n",
              "      <td>21.6</td>\n",
              "      <td>62.8</td>\n",
              "      <td>Clear</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>10</td>\n",
              "      <td>Weather</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>21.6</td>\n",
              "      <td>64.1</td>\n",
              "      <td>Detour</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>26.9</td>\n",
              "      <td>70.0</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>1</td>\n",
              "      <td>Weather</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>Delivered</td>\n",
              "      <td>23.7</td>\n",
              "      <td>77.9</td>\n",
              "      <td>Detour</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>Delayed</td>\n",
              "      <td>18.7</td>\n",
              "      <td>73.6</td>\n",
              "      <td>Clear</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>9</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cc5c98a-df07-48c3-86b8-2bcca4a752f9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2cc5c98a-df07-48c3-86b8-2bcca4a752f9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2cc5c98a-df07-48c3-86b8-2bcca4a752f9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-30b40a92-86d3-457d-b7dc-57f99e650e2f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30b40a92-86d3-457d-b7dc-57f99e650e2f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-30b40a92-86d3-457d-b7dc-57f99e650e2f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_92bcc82d-0eb3-4fa4-90e6-f8655b222361\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_92bcc82d-0eb3-4fa4-90e6-f8655b222361 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shipment_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"In Transit\",\n          \"Delivered\",\n          \"Delayed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.68948584089441,\n        \"min\": 50.0,\n        \"max\": 80.0,\n        \"num_unique_values\": 274,\n        \"samples\": [\n          52.9,\n          55.1,\n          62.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Traffic_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Heavy\",\n          \"Detour\",\n          \"Clear\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Purchase_Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay_Reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Weather\",\n          \"Traffic\",\n          \"Mechanical Failure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand_Forecast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 100,\n        \"max\": 300,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          277,\n          101,\n          143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Asset_ID*"
      ],
      "metadata": {
        "id": "MLz9hExM4UOy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Asset_ID\"].unique ()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wKPazaus1ksr",
        "outputId": "b1d24d7c-3534-422f-fa92-86307d8846ba"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Truck_6', 'Truck_9', 'Truck_2', 'Truck_10', 'Truck_8', 'Truck_3',\n",
              "       'Truck_5', 'Truck_4', 'Truck_1', 'Truck_7'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import statsmodels.api as sm # import statsmodels and assign it to the variable sm\n",
        "import statsmodels.formula.api as smf # import statsmodels.formula.api and assign it to the variable smf\n",
        "\n",
        "\n",
        "modelo= smf.ols(\"Waiting_Time ~ C(Asset_ID)\",data=df). fit()\n",
        "tabla_anova =sm.stats.anova_lm(modelo)\n",
        "tabla_anova"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "eXFGdKHY2-hD",
        "outputId": "0405f374-e7fe-45df-97fd-0decc4b0662b"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                df         sum_sq     mean_sq         F    PR(>F)\n",
              "C(Asset_ID)    9.0    1185.003921  131.667102  0.635796  0.766885\n",
              "Residual     727.0  150554.551031  207.090166       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3ec2f9e0-d603-44cb-bb38-9fa3bee12d7e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(Asset_ID)</th>\n",
              "      <td>9.0</td>\n",
              "      <td>1185.003921</td>\n",
              "      <td>131.667102</td>\n",
              "      <td>0.635796</td>\n",
              "      <td>0.766885</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>727.0</td>\n",
              "      <td>150554.551031</td>\n",
              "      <td>207.090166</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ec2f9e0-d603-44cb-bb38-9fa3bee12d7e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3ec2f9e0-d603-44cb-bb38-9fa3bee12d7e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3ec2f9e0-d603-44cb-bb38-9fa3bee12d7e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-09014f65-0b1c-4dc0-85cd-680a4b0221dd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09014f65-0b1c-4dc0-85cd-680a4b0221dd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-09014f65-0b1c-4dc0-85cd-680a4b0221dd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_67e8b55f-2128-4a23-a67f-6672d8689545\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_67e8b55f-2128-4a23-a67f-6672d8689545 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 507.70266889194113,\n        \"min\": 9.0,\n        \"max\": 727.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          727.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105620.21966434018,\n        \"min\": 1185.0039211874087,\n        \"max\": 150554.55103132277,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          150554.55103132277,\n          1185.0039211874087\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.332160101604586,\n        \"min\": 131.66710235415653,\n        \"max\": 207.090166480499,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          207.090166480499,\n          131.66710235415653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6357960138418991,\n        \"max\": 0.6357960138418991,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6357960138418991\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7668850909107338,\n        \"max\": 0.7668850909107338,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7668850909107338\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Latitude*"
      ],
      "metadata": {
        "id": "d2icK5L35PJq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.histplot(df['Latitude'], kde = True, color = 'pink')\n",
        "plt.xlabel('Latitud')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Distribucion de Latitud')\n",
        "\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['top'].set_visible(False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "P4ln_9EN9ZdG",
        "outputId": "3584ce93-2422-4df0-d39d-bf32270f20fa"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Logitude histograma*\n"
      ],
      "metadata": {
        "id": "xOfCX83o9iyK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.histplot(df['Longitude'], kde = True, color = 'pink')\n",
        "plt.xlabel('Longitud')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Distribucion de Longitud')\n",
        "\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['top'].set_visible(False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "onwClprF9rv9",
        "outputId": "f2b704eb-9fae-4b4a-e319-a35338f3a782"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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ZcuafQ6z2SwWLlwoIiIihNFoFKNHjxaHDh1qcfo+UXtTCdHOo8iIiKhd5eTkYMiQIXj//fev2K1J5I44RoaISEGqqqqa7FuxYgXUajVuvvlmGSoikhfHyBARKcjSpUuRnZ2NW2+9FR4eHti8eTM2b96MGTNmOGXmF5HSsGuJiEhBtm3bhoULF+LIkSMoLy9HVFQU7r//fjz33HPtfpV1IlfEIENERESKxTEyREREpFgMMkRERKRYbh9khBAoLS1t92uVEBERUcdz+yBTVlYGPz8/u+XZiYiIyD24fZAhIiIi98UgQ0RERIrFIENERESKxSBDREREisUgQ0RERIrFIENERESKxSBDREREisUgQ0RERIrFIENERESKxSBDREREisUgQ0RERIrFIENERESKxSBDREREisUgQ0RERIrFIENERESKxSBDREREiuUhdwFERETUvNzcXBQWFspdxhUFBwcjKipKttdnkCEiInJBubm56Nu3LyorK+Uu5Yo8PT1x9OhR2cIMgwwREZELKiwsRGVlJd5f/hr69uwldznNOnryBO6bMwuFhYUMMkRERNRU3569MHTADXKX4bIYZIiIFIbjJogaMMgQESkIx00Q2WOQISJSEI6bILLHIENEpEAcN0Ek4YJ4REREpFhskbkGHHBHREQkLwYZB3HAHRERkfwYZBzEAXdERETyY5C5RhxwR0REJB8O9iUiIiLFYosMEXUYDpAnImdjkCGiDsEB8kTUHhhkiKhDcIA8EbUHBhki6lAcIE9EzsTBvkRERKRYDDJERESkWAwyREREpFgMMkRERKRYDDJERESkWAwyREREpFiyBpnu3btDpVI12VJTUwEA1dXVSE1NRVBQELy9vZGcnIz8/Hw5SyYiIiIXImuQOXDgAM6fP2/btm3bBgC46667AABz5szBp59+io0bN2L37t04d+4cJk+eLGfJRERE5EJkXRAvJCTE7vaSJUvQo0cP3HLLLSgpKcG7776L9evXY8yYMQCAtWvXom/fvti3bx9uuukmOUomIiIiF+IyY2Rqamrw/vvv449//CNUKhWys7NRW1uLhIQE2zF9+vRBVFQUsrKyZKyUiIiIXIXLXKJg06ZNKC4uxtSpUwEAeXl50Ol08Pf3tzsuLCwMeXl5LT6PyWSCyWSy3S4tLW2PcsmJeEVkIiJylMsEmXfffRdJSUno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v7+/3bFhYWHIy8tr9nkyMjLg5+dn2yIjI9u7dCIiIpKJywSZ1NRUHDp0CBs2bLim50lPT0dJSYltO3v2rJMqJCIiIlcj6xgZq8cffxyfffYZ9uzZg27dutn2h4eHo6amBsXFxXatMvn5+QgPD2/2ufR6PfR6fXuXTERERC5A1hYZIQQef/xxfPTRR9ixYwdiYmLs7o+NjYVWq0VmZqZt3/Hjx5Gbm4v4+PiOLpeIiIhcjKwtMqmpqVi/fj0+/vhj+Pj42Ma9+Pn5wWg0ws/PD9OnT0daWhoCAwPh6+uLmTNnIj4+njOWiIiISN4g8+abbwIARo8ebbd/7dq1mDp1KgBg+fLlUKvVSE5OhslkQmJiIlatWtXBlRIREZErkjXICCGueozBYMDKlSuxcuXKDqiIiIiIlMRlZi0RERERtRWDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESkWgwwREREpFoMMERERKRaDDBERESmWrEFmz549uPPOO9GlSxeoVCps2rTJ7n4hBObNm4eIiAgYjUYkJCTgxIkT8hRLRERELkfWIFNRUYFBgwZh5cqVzd6/dOlSvPbaa1i9ejX2798PLy8vJCYmorq6uoMrJSIiIlfkIeeLJyUlISkpqdn7hBBYsWIFnn/+eUycOBEA8N577yEsLAybNm3CPffc05GlEhERkQty2TEyp0+fRl5eHhISEmz7/Pz8EBcXh6ysrBYfZzKZUFpaarcRERGRe3LZIJOXlwcACAsLs9sfFhZmu685GRkZ8PPzs22RkZHtWicRERHJx2WDjKPS09NRUlJi286ePSt3SURERNROXDbIhIeHAwDy8/Pt9ufn59vua45er4evr6/dRkRERO7JZYNMTEwMwsPDkZmZadtXWlqK/fv3Iz4+XsbKiIiIyFXIOmupvLwcJ0+etN0+ffo0cnJyEBgYiKio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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Inventory_Level, histograma*"
      ],
      "metadata": {
        "id": "qcmo4V2y93sT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.histplot(df['Inventory_Level'], kde = True, color = 'pink')\n",
        "plt.xlabel('Inventario')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Distribucion de Inventario')\n",
        "\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['top'].set_visible(False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "MfcltK6493VY",
        "outputId": "4b355705-f563-43eb-cf65-97be33bfddfc"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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wQI89NBDAABJkjBt2jS8+OKLaNu2LWJjYzFr1ixERUVh+PDhShZdNTIyMnDhwgWli3FVISEhiImJUboYRESkQooOvy4oKMCsWbPw0UcfIScnB1FRURg9ejRmz54Ng8EAQJ4Qb86cOXjrrbeQm5uLvn37YsmSJbj55puv6z2a8vDrjIwMdOjQAcXFxUoX5ap8fHxw7NgxhhkiIqozRYNMY2jKQWb//v2Ij4/Hu68vQoe4tkoXp0bHThzH2OlPYN++fejRo4fSxSEiIpVRtGmJGkeHuLbo0bmL0sUgIiJyOy4aSURERKrFIENERESqxSBDREREqsUgQ0RERKrFIENERESqxSBDREREqsUgQ0RERKrFIENERESqxSBDREREqsUgQ0RERKrFIENERESqxSBDREREqsUgQ0RERKrFIENERESqxSBDREREqsUgQ0RERKrFIENERESqxSBDREREqsUgQ0RERKrFIENERESqxSBDREREqsUgQ0RERKqlU7oAROQeGRkZuHDhgtLFuKqQkBDExMQoXYyr4veRSF0YZIi8QEZGBjp06IDi4mKli3JVPj4+OHbsmMd+CPP7SKQ+DDJEXuDChQsoLi7Gu68vQoe4tkoXp0bHThzH2OlP4MKFCx77AczvI5H6MMgQeZEOcW3Ro3MXpYuhevw+EqkHO/sSERGRarFGhoiI3I6dpqmxMMgQEZFbsdM0NSYGGSIicit2mqbGxCBDREQNgp2mqTGwsy8RERGpFoMMERERqZaiQaZ169aQJKnaNnnyZABAaWkpJk+ejObNm8PPzw/JycnIzs5WsshERETkQRQNMnv27EFmZqZz27x5MwDg/vvvBwBMnz4dn376KdavX4/t27fj3LlzGDFihJJFJiIiIg+iaGff0NBQl8evvPIK2rRpg/79+yMvLw/Lly/HmjVrMGDAAADAihUr0KFDB+zatQt9+vRRoshERETkQTymj4zVasW7776Lhx56CJIkYd++fSgrK0NiYqLzmPbt2yMmJgY7d+6s9TwWiwX5+fkuGxEREXknjxl+vWHDBuTm5mL8+PEAgKysLBgMBgQFBbkcFx4ejqysrFrPk5qaiueff74BS0qkMCGAEgtQXAIUlwKWMtxUYseW15eivU8QcO585bEaCZA0gFYD6LTyptfJm8Zj/o4hIqo3jwkyy5cvx5AhQxAVFXVD50lJ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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Shipment_Status, anova*"
      ],
      "metadata": {
        "id": "9_2ApoeJ-bGv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Shipment_Status\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6xj61egn-cgR",
        "outputId": "517d371b-55c9-4f0c-c708-83b1f42cd7ef"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['In Transit', 'Delivered', 'Delayed'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "modelo=smf.ols(\"Waiting_Time ~ C(Shipment_Status)\",data=df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo)\n",
        "tabla_anova\n",
        "\n",
        "#no se rechaza la hipotesis nula"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "nMVz4r8E-gxp",
        "outputId": "fbf27deb-68d7-443f-c58c-02f6ef5ad058"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       df         sum_sq     mean_sq         F    PR(>F)\n",
              "C(Shipment_Status)    2.0     208.098709  104.049355  0.504002  0.604317\n",
              "Residual            734.0  151531.456243  206.446126       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-34e0defb-5cd2-4ec7-9be3-cb02cc3c9cae\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(Shipment_Status)</th>\n",
              "      <td>2.0</td>\n",
              "      <td>208.098709</td>\n",
              "      <td>104.049355</td>\n",
              "      <td>0.504002</td>\n",
              "      <td>0.604317</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>734.0</td>\n",
              "      <td>151531.456243</td>\n",
              "      <td>206.446126</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34e0defb-5cd2-4ec7-9be3-cb02cc3c9cae')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-34e0defb-5cd2-4ec7-9be3-cb02cc3c9cae button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-34e0defb-5cd2-4ec7-9be3-cb02cc3c9cae');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7fa38605-da92-4bdb-814f-1cad5bb42cd8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7fa38605-da92-4bdb-814f-1cad5bb42cd8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7fa38605-da92-4bdb-814f-1cad5bb42cd8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6799e22f-b3a7-4c60-a11a-fdecbe3a91c0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6799e22f-b3a7-4c60-a11a-fdecbe3a91c0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 517.6021638285528,\n        \"min\": 2.0,\n        \"max\": 734.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          734.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107001.77226392018,\n        \"min\": 208.09870945848013,\n        \"max\": 151531.45624305168,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          151531.45624305168,\n          208.09870945848013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 72.40545110504206,\n        \"min\": 104.04935472924006,\n        \"max\": 206.44612567173255,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          206.44612567173255,\n          104.04935472924006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.5040024577389632,\n        \"max\": 0.5040024577389632,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5040024577389632\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6043168091875866,\n        \"max\": 0.6043168091875866,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6043168091875866\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns = [\"Shipment_Status\"], inplace = True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "Yg3ePLCg-1n5",
        "outputId": "5b79e1f2-cf00-4d02-f7d0-3f7866ae7a78"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  Humidity  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5      54.3   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4      52.3   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3      64.2   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9      57.3   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7      63.6   \n",
              "..        ...       ...        ...              ...          ...       ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6      62.8   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6      64.1   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9      70.0   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7      77.9   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7      73.6   \n",
              "\n",
              "    Traffic_Status  Waiting_Time  User_Transaction_Amount  \\\n",
              "1            Heavy            16                      439   \n",
              "3            Heavy            37                      227   \n",
              "7           Detour            30                      459   \n",
              "9            Clear            52                      127   \n",
              "11          Detour            13                      406   \n",
              "..             ...           ...                      ...   \n",
              "993          Clear            31                      242   \n",
              "994         Detour            32                      307   \n",
              "995          Heavy            32                      188   \n",
              "996         Detour            56                      276   \n",
              "999          Clear            55                      323   \n",
              "\n",
              "     User_Purchase_Frequency Logistics_Delay_Reason  Asset_Utilization  \\\n",
              "1                          7                Weather               80.9   \n",
              "3                          5                Traffic               97.4   \n",
              "7                          9                Traffic               73.8   \n",
              "9                          7     Mechanical Failure               63.1   \n",
              "11                        10                Traffic               85.5   \n",
              "..                       ...                    ...                ...   \n",
              "993                       10                Weather               95.6   \n",
              "994                       10                Traffic               64.0   \n",
              "995                        1                Weather               79.2   \n",
              "996                        7                Weather               83.7   \n",
              "999                        9     Mechanical Failure               81.3   \n",
              "\n",
              "     Demand_Forecast  Logistics_Delay  \n",
              "1                174                1  \n",
              "3                160                1  \n",
              "7                253                0  \n",
              "9                224                0  \n",
              "11               238                0  \n",
              "..               ...              ...  \n",
              "993              221                1  \n",
              "994              168                0  \n",
              "995              213                1  \n",
              "996              272                0  \n",
              "999              141                1  \n",
              "\n",
              "[737 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f01bc7cc-c2f3-4a41-a21a-095b9a960688\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Traffic_Status</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>User_Purchase_Frequency</th>\n",
              "      <th>Logistics_Delay_Reason</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>54.3</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>52.3</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>5</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>64.2</td>\n",
              "      <td>Detour</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>9</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>57.3</td>\n",
              "      <td>Clear</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>7</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>63.6</td>\n",
              "      <td>Detour</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>62.8</td>\n",
              "      <td>Clear</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>10</td>\n",
              "      <td>Weather</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>64.1</td>\n",
              "      <td>Detour</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>70.0</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>1</td>\n",
              "      <td>Weather</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>77.9</td>\n",
              "      <td>Detour</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>73.6</td>\n",
              "      <td>Clear</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>9</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f01bc7cc-c2f3-4a41-a21a-095b9a960688')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f01bc7cc-c2f3-4a41-a21a-095b9a960688 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f01bc7cc-c2f3-4a41-a21a-095b9a960688');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b7786eca-b09f-4717-8a1f-6cd0c8d1d233\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b7786eca-b09f-4717-8a1f-6cd0c8d1d233')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b7786eca-b09f-4717-8a1f-6cd0c8d1d233 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_03002d5f-6116-4bc3-9ed0-442055a8fc7f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_03002d5f-6116-4bc3-9ed0-442055a8fc7f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.68948584089441,\n        \"min\": 50.0,\n        \"max\": 80.0,\n        \"num_unique_values\": 274,\n        \"samples\": [\n          52.9,\n          55.1,\n          62.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Traffic_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Heavy\",\n          \"Detour\",\n          \"Clear\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Purchase_Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay_Reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Weather\",\n          \"Traffic\",\n          \"Mechanical Failure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand_Forecast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 100,\n        \"max\": 300,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          277,\n          101,\n          143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Temperature*"
      ],
      "metadata": {
        "id": "R_MUiDK0-9XX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "modelo=smf.ols(\"Waiting_Time ~ C(Temperature)\",data=df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo)\n",
        "tabla_anova\n",
        "\n",
        "#Se rechaza la hipotesis nula"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "0JZaCvGt_But",
        "outputId": "194309dd-cafd-4a08-8126-d33c0c4e2747"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   df         sum_sq     mean_sq         F    PR(>F)\n",
              "C(Temperature)  119.0   21204.060583  178.185383  0.842226  0.876205\n",
              "Residual        617.0  130535.494370  211.564821       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09fecf74-a09b-4756-9429-643ad13810f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(Temperature)</th>\n",
              "      <td>119.0</td>\n",
              "      <td>21204.060583</td>\n",
              "      <td>178.185383</td>\n",
              "      <td>0.842226</td>\n",
              "      <td>0.876205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>617.0</td>\n",
              "      <td>130535.494370</td>\n",
              "      <td>211.564821</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09fecf74-a09b-4756-9429-643ad13810f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-09fecf74-a09b-4756-9429-643ad13810f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-09fecf74-a09b-4756-9429-643ad13810f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-04ab2a8a-ba3e-4b1d-b4d7-59b4395c688c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04ab2a8a-ba3e-4b1d-b4d7-59b4395c688c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-04ab2a8a-ba3e-4b1d-b4d7-59b4395c688c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4d44ef89-38bc-4846-b400-4b0df4a79f85\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4d44ef89-38bc-4846-b400-4b0df4a79f85 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 352.13917703090067,\n        \"min\": 119.0,\n        \"max\": 617.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          617.0,\n          119.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77308.99822730235,\n        \"min\": 21204.060582990816,\n        \"max\": 130535.49436951935,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          130535.49436951935,\n          21204.060582990816\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.60282671153769,\n        \"min\": 178.185383050343,\n        \"max\": 211.56482069614157,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          211.56482069614157,\n          178.185383050343\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8422259545043194,\n        \"max\": 0.8422259545043194,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8422259545043194\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8762052380720666,\n        \"max\": 0.8762052380720666,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8762052380720666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "06XwBXEQ_GXF",
        "outputId": "6ce871e2-52c6-4a8b-8cd6-08ca6956def1"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  Humidity  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5      54.3   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4      52.3   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3      64.2   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9      57.3   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7      63.6   \n",
              "..        ...       ...        ...              ...          ...       ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6      62.8   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6      64.1   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9      70.0   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7      77.9   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7      73.6   \n",
              "\n",
              "    Traffic_Status  Waiting_Time  User_Transaction_Amount  \\\n",
              "1            Heavy            16                      439   \n",
              "3            Heavy            37                      227   \n",
              "7           Detour            30                      459   \n",
              "9            Clear            52                      127   \n",
              "11          Detour            13                      406   \n",
              "..             ...           ...                      ...   \n",
              "993          Clear            31                      242   \n",
              "994         Detour            32                      307   \n",
              "995          Heavy            32                      188   \n",
              "996         Detour            56                      276   \n",
              "999          Clear            55                      323   \n",
              "\n",
              "     User_Purchase_Frequency Logistics_Delay_Reason  Asset_Utilization  \\\n",
              "1                          7                Weather               80.9   \n",
              "3                          5                Traffic               97.4   \n",
              "7                          9                Traffic               73.8   \n",
              "9                          7     Mechanical Failure               63.1   \n",
              "11                        10                Traffic               85.5   \n",
              "..                       ...                    ...                ...   \n",
              "993                       10                Weather               95.6   \n",
              "994                       10                Traffic               64.0   \n",
              "995                        1                Weather               79.2   \n",
              "996                        7                Weather               83.7   \n",
              "999                        9     Mechanical Failure               81.3   \n",
              "\n",
              "     Demand_Forecast  Logistics_Delay  \n",
              "1                174                1  \n",
              "3                160                1  \n",
              "7                253                0  \n",
              "9                224                0  \n",
              "11               238                0  \n",
              "..               ...              ...  \n",
              "993              221                1  \n",
              "994              168                0  \n",
              "995              213                1  \n",
              "996              272                0  \n",
              "999              141                1  \n",
              "\n",
              "[737 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f862f8d4-11c6-443a-b109-0eadf8517c6a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Traffic_Status</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>User_Purchase_Frequency</th>\n",
              "      <th>Logistics_Delay_Reason</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>54.3</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>52.3</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>5</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>64.2</td>\n",
              "      <td>Detour</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>9</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>57.3</td>\n",
              "      <td>Clear</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>7</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>63.6</td>\n",
              "      <td>Detour</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>62.8</td>\n",
              "      <td>Clear</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>10</td>\n",
              "      <td>Weather</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>64.1</td>\n",
              "      <td>Detour</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>70.0</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>1</td>\n",
              "      <td>Weather</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>77.9</td>\n",
              "      <td>Detour</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>73.6</td>\n",
              "      <td>Clear</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>9</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f862f8d4-11c6-443a-b109-0eadf8517c6a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f862f8d4-11c6-443a-b109-0eadf8517c6a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f862f8d4-11c6-443a-b109-0eadf8517c6a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-003e8118-0aea-4085-be74-1a2f01bb22cb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-003e8118-0aea-4085-be74-1a2f01bb22cb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-003e8118-0aea-4085-be74-1a2f01bb22cb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_13140376-cbc7-4e2c-be7c-e1cdcbec9036\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_13140376-cbc7-4e2c-be7c-e1cdcbec9036 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.68948584089441,\n        \"min\": 50.0,\n        \"max\": 80.0,\n        \"num_unique_values\": 274,\n        \"samples\": [\n          52.9,\n          55.1,\n          62.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Traffic_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Heavy\",\n          \"Detour\",\n          \"Clear\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Purchase_Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay_Reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Weather\",\n          \"Traffic\",\n          \"Mechanical Failure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand_Forecast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 100,\n        \"max\": 300,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          277,\n          101,\n          143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Humidity, anova*"
      ],
      "metadata": {
        "id": "AUc_FhtD_JpF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "modelo=smf.ols(\"Waiting_Time ~ C(Humidity)\",data=df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo)\n",
        "tabla_anova\n",
        "\n",
        "#Se rechaza la hipotesis nula"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "kanMSLuc_HE_",
        "outputId": "1ed586fd-7c0e-4952-f219-623e915303dd"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                df        sum_sq     mean_sq        F    PR(>F)\n",
              "C(Humidity)  273.0  54928.590667  201.203629  0.96226  0.635462\n",
              "Residual     463.0  96810.964286  209.094955      NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20559ae8-2d3e-4c34-b659-bfc854de8254\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(Humidity)</th>\n",
              "      <td>273.0</td>\n",
              "      <td>54928.590667</td>\n",
              "      <td>201.203629</td>\n",
              "      <td>0.96226</td>\n",
              "      <td>0.635462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>463.0</td>\n",
              "      <td>96810.964286</td>\n",
              "      <td>209.094955</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20559ae8-2d3e-4c34-b659-bfc854de8254')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-20559ae8-2d3e-4c34-b659-bfc854de8254 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-20559ae8-2d3e-4c34-b659-bfc854de8254');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ea879871-97a6-4267-bfaa-a71f9ee5cba8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea879871-97a6-4267-bfaa-a71f9ee5cba8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ea879871-97a6-4267-bfaa-a71f9ee5cba8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_edee8cc9-27fa-49b5-8b87-f81bd16a6e0e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_edee8cc9-27fa-49b5-8b87-f81bd16a6e0e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134.35028842544403,\n        \"min\": 273.0,\n        \"max\": 463.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          463.0,\n          273.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29615.310398125737,\n        \"min\": 54928.59066679593,\n        \"max\": 96810.96428571429,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          96810.96428571429,\n          54928.59066679593\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.580010441547314,\n        \"min\": 201.2036288161023,\n        \"max\": 209.094955260722,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          209.094955260722,\n          201.2036288161023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9622596038494571,\n        \"max\": 0.9622596038494571,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9622596038494571\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6354619490418523,\n        \"max\": 0.6354619490418523,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6354619490418523\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns = [\"Humidity\"], inplace = True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "YBkJWwgR_O3T",
        "outputId": "0456b2ea-8418-41b5-978b-aaef50ce2731"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7   \n",
              "..        ...       ...        ...              ...          ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7   \n",
              "\n",
              "    Traffic_Status  Waiting_Time  User_Transaction_Amount  \\\n",
              "1            Heavy            16                      439   \n",
              "3            Heavy            37                      227   \n",
              "7           Detour            30                      459   \n",
              "9            Clear            52                      127   \n",
              "11          Detour            13                      406   \n",
              "..             ...           ...                      ...   \n",
              "993          Clear            31                      242   \n",
              "994         Detour            32                      307   \n",
              "995          Heavy            32                      188   \n",
              "996         Detour            56                      276   \n",
              "999          Clear            55                      323   \n",
              "\n",
              "     User_Purchase_Frequency Logistics_Delay_Reason  Asset_Utilization  \\\n",
              "1                          7                Weather               80.9   \n",
              "3                          5                Traffic               97.4   \n",
              "7                          9                Traffic               73.8   \n",
              "9                          7     Mechanical Failure               63.1   \n",
              "11                        10                Traffic               85.5   \n",
              "..                       ...                    ...                ...   \n",
              "993                       10                Weather               95.6   \n",
              "994                       10                Traffic               64.0   \n",
              "995                        1                Weather               79.2   \n",
              "996                        7                Weather               83.7   \n",
              "999                        9     Mechanical Failure               81.3   \n",
              "\n",
              "     Demand_Forecast  Logistics_Delay  \n",
              "1                174                1  \n",
              "3                160                1  \n",
              "7                253                0  \n",
              "9                224                0  \n",
              "11               238                0  \n",
              "..               ...              ...  \n",
              "993              221                1  \n",
              "994              168                0  \n",
              "995              213                1  \n",
              "996              272                0  \n",
              "999              141                1  \n",
              "\n",
              "[737 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e419ceb7-d86e-4eda-be3a-6d09f93aac3d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Traffic_Status</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>User_Purchase_Frequency</th>\n",
              "      <th>Logistics_Delay_Reason</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>5</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>Detour</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>9</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>Clear</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>7</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>Detour</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>Clear</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>10</td>\n",
              "      <td>Weather</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>Detour</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>Heavy</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>1</td>\n",
              "      <td>Weather</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>Detour</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>Clear</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>9</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e419ceb7-d86e-4eda-be3a-6d09f93aac3d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e419ceb7-d86e-4eda-be3a-6d09f93aac3d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e419ceb7-d86e-4eda-be3a-6d09f93aac3d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b5cd483d-3121-442a-906e-8c70bf1ab6a3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b5cd483d-3121-442a-906e-8c70bf1ab6a3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b5cd483d-3121-442a-906e-8c70bf1ab6a3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e93e414b-d9ae-4ed3-881c-ac0ba3d7f413\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e93e414b-d9ae-4ed3-881c-ac0ba3d7f413 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Traffic_Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Heavy\",\n          \"Detour\",\n          \"Clear\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Purchase_Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay_Reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Weather\",\n          \"Traffic\",\n          \"Mechanical Failure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand_Forecast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 100,\n        \"max\": 300,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          277,\n          101,\n          143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Traffic_Status*"
      ],
      "metadata": {
        "id": "-XBDayLP_Sp1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Traffic_Status\"].unique()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RCHhVIBN_SVf",
        "outputId": "3387c6ad-ceda-4714-de65-433c71d522c7"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Heavy', 'Detour', 'Clear'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "modelo=smf.ols(\"Waiting_Time ~ C(Traffic_Status)\",data=df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo)\n",
        "tabla_anova\n",
        "\n",
        "#no hay datos suficientes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "psaD-ptU_Woy",
        "outputId": "1bd2ffd1-9692-486c-d9b3-e0e4fc9b126f"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      df         sum_sq     mean_sq         F    PR(>F)\n",
              "C(Traffic_Status)    2.0     168.452231   84.226116  0.407874  0.665213\n",
              "Residual           734.0  151571.102721  206.500140       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9db78ded-66f7-4a81-90e2-5d07f4310fbf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(Traffic_Status)</th>\n",
              "      <td>2.0</td>\n",
              "      <td>168.452231</td>\n",
              "      <td>84.226116</td>\n",
              "      <td>0.407874</td>\n",
              "      <td>0.665213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>734.0</td>\n",
              "      <td>151571.102721</td>\n",
              "      <td>206.500140</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9db78ded-66f7-4a81-90e2-5d07f4310fbf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9db78ded-66f7-4a81-90e2-5d07f4310fbf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9db78ded-66f7-4a81-90e2-5d07f4310fbf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2bed72f0-08f7-47f2-b991-b23b4c18821d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2bed72f0-08f7-47f2-b991-b23b4c18821d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2bed72f0-08f7-47f2-b991-b23b4c18821d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4c6d23dc-c6d0-41a3-b728-ebefb5e5f4fd\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4c6d23dc-c6d0-41a3-b728-ebefb5e5f4fd button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 517.6021638285528,\n        \"min\": 2.0,\n        \"max\": 734.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          734.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107057.84085086007,\n        \"min\": 168.45223142174538,\n        \"max\": 151571.10272108842,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          151571.10272108842,\n          168.45223142174538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86.46079170032466,\n        \"min\": 84.22611571087269,\n        \"max\": 206.50013994698696,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          206.50013994698696,\n          84.22611571087269\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.40787437593260395,\n        \"max\": 0.40787437593260395,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.40787437593260395\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6652130636553744,\n        \"max\": 0.6652130636553744,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6652130636553744\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns = [\"Traffic_Status\"], inplace = True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "hbG9T8Ly_X4R",
        "outputId": "f99057f9-9a0e-4714-a660-636969d6a15c"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7   \n",
              "..        ...       ...        ...              ...          ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7   \n",
              "\n",
              "     Waiting_Time  User_Transaction_Amount  User_Purchase_Frequency  \\\n",
              "1              16                      439                        7   \n",
              "3              37                      227                        5   \n",
              "7              30                      459                        9   \n",
              "9              52                      127                        7   \n",
              "11             13                      406                       10   \n",
              "..            ...                      ...                      ...   \n",
              "993            31                      242                       10   \n",
              "994            32                      307                       10   \n",
              "995            32                      188                        1   \n",
              "996            56                      276                        7   \n",
              "999            55                      323                        9   \n",
              "\n",
              "    Logistics_Delay_Reason  Asset_Utilization  Demand_Forecast  \\\n",
              "1                  Weather               80.9              174   \n",
              "3                  Traffic               97.4              160   \n",
              "7                  Traffic               73.8              253   \n",
              "9       Mechanical Failure               63.1              224   \n",
              "11                 Traffic               85.5              238   \n",
              "..                     ...                ...              ...   \n",
              "993                Weather               95.6              221   \n",
              "994                Traffic               64.0              168   \n",
              "995                Weather               79.2              213   \n",
              "996                Weather               83.7              272   \n",
              "999     Mechanical Failure               81.3              141   \n",
              "\n",
              "     Logistics_Delay  \n",
              "1                  1  \n",
              "3                  1  \n",
              "7                  0  \n",
              "9                  0  \n",
              "11                 0  \n",
              "..               ...  \n",
              "993                1  \n",
              "994                0  \n",
              "995                1  \n",
              "996                0  \n",
              "999                1  \n",
              "\n",
              "[737 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-570c1704-0f88-49eb-999a-ffcf1984d77b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>User_Purchase_Frequency</th>\n",
              "      <th>Logistics_Delay_Reason</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>5</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>9</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>7</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>10</td>\n",
              "      <td>Weather</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>1</td>\n",
              "      <td>Weather</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>9</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-570c1704-0f88-49eb-999a-ffcf1984d77b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-570c1704-0f88-49eb-999a-ffcf1984d77b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-570c1704-0f88-49eb-999a-ffcf1984d77b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e782b75a-8abe-4b49-9eaf-c534256f28c2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e782b75a-8abe-4b49-9eaf-c534256f28c2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e782b75a-8abe-4b49-9eaf-c534256f28c2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4f5713ba-b126-40b8-85ba-b442410f34fd\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4f5713ba-b126-40b8-85ba-b442410f34fd button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Purchase_Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay_Reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Weather\",\n          \"Traffic\",\n          \"Mechanical Failure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand_Forecast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 100,\n        \"max\": 300,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          277,\n          101,\n          143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Waiting_Time*"
      ],
      "metadata": {
        "id": "4I5Tvh5y_cPR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Waiting_Time\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sxc035Kj_c9a",
        "outputId": "0d21c0f9-f5e0-400e-fa27-83a2787eadf6"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([16, 37, 30, 52, 13, 38, 54, 45, 58, 21, 31, 20, 57, 35, 22, 14, 26,\n",
              "       41, 39, 50, 19, 12, 40, 15, 17, 46, 55, 23, 49, 32, 34, 24, 51, 59,\n",
              "       56, 25, 53, 29, 18, 43, 44, 42, 60, 36, 10, 48, 27, 33, 28, 47, 11])"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.histplot(df['Waiting_Time'], kde = True, color = 'pink')\n",
        "plt.xlabel('Tiempo de Espera')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Distribucion de Tiempo de Espera')\n",
        "\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['top'].set_visible(False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "a23D2qnu_fKj",
        "outputId": "28379558-ac33-4e82-bb09-c3506432acf1"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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ly4VAMSePXvKvU9AQIDo0qWL8/qsWbPEtb/S77zzjgAgLl++XO5j7NmzRwAQS5cuLXVb3759BQCxePHiMm/r27ev8/rWrVsFANGoUSORnZ3tPL569WoBQCxcuNB5rFmzZmL06NE3fcxPP/1UABDz588vdV+Hw+H8PwAxa9Ys5/X77rtP6PV6cebMGeexS5cuCT8/P3HHHXc4jxWf47i4OJfHmzx5svDy8hKZmZmlnvdanTt3FhERES7327hxowAgmjVr5jz2008/CQDiiy++cPn69evXl3n8RoYMGeLy2Ne6/vx99tlnQqvVip9++snlfosXLxYAxI4dO5zHAAiDwSDOnj3rPLZkyRIBQISHh7v8TKdPny4AuNy3+Hfl7bffdh4rLCwUnTt3FqGhocJqtQohhFiwYIEAID7//HPn/axWq+jZs6fw9fV1eZ7rpaamCr1eL4YMGeLy83rppZcEAJffqddee034+PiIkydPujzGiy++KLy8vERiYmK5z3Pt91PWZdy4cc77BQQEiAkTJlTosW52bir789JqteLYsWOlns9isbhct1qton379qJ///43rJPUi11LpFq+vr43nL0UGBgIAPjmm2+q3JxuMBgwduzYCt//scceg5+fn/P6/fffj4iICPzvf/+r9HP/+9//RnBwMJ599tlSt5U3zdxut2Pjxo2477770KJFC+fxiIgIPPLII/j555+RnZ3t8jVPPfWUy+P16dMHdrsd58+fL7e2pKQkHDx4EKNHj3YZ/HnXXXehbdu2Lvdds2YNAgICcNdddyEtLc156datG3x9fbF169Ybn4gqWrNmDWJjY9GmTRuX5+3fvz8AlHreAQMGuEwbL265GjFihMvPtPj477//7vL13t7eGDdunPO6Xq/HuHHjkJqain379gEA/ve//yE8PBwPP/yw8346nQ7PPfcccnNzsX379nK/nx9++AFWqxXPPvusy89r0qRJZX7vffr0QVBQkMv3HhcXB7vdjh9//LHc5ynWvHlzbNq0qdTl2ucLDAzE7t27cenSpRs+VkXOTWV/Xn379i31uwbApeUzIyMDWVlZ6NOnj0t3F9Ut7Foi1crNzUVoaGi5tz/44IP45JNP8Ne//hUvvvgiBgwYgOHDh+P++++HVluxDN+oUaNKDeyNiYlxua7RaBAdHV2l6cFnzpxB69atKzWA+fLl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ZBJ+fn6iQ4cOYurUqeLSpUs3fZ5ilZl+LYScejt37lzRrl07YTAYRFBQkOjWrZuYPXu2yMrKct4PQKlpxGfPnhUAxFtvveVyvPj8rFmzxuW527VrJ/bu3St69uwpjEajaNasmXj//fdL1ZmSkiLGjh0rgoODhV6vFx06dChz+n9Z7Ha7mD17toiIiBAmk0n069dPHD16tMwp/Tk5OWL69OkiOjpa6PV6ERwcLG6//Xbxj3/8wznluTw3mn5d/DdWWFgoXnjhBdGpUyfh5+cnfHx8RKdOncSHH35Y6rEqem6q8/Mq9s9//lPExMQIg8Eg2rRpI5YuXVrqtYHqFo0QHjxijYhIBfr164e0tDQcPXpU6VI8Ds8N1TSOkSEiIiLVYpAhIiIi1WKQISIiItXiGBkiIiJSLbbIEBERkWoxyBAREZFq1fkgI4RAdna2R++LQkRERFVT54NMTk4OAgICXJaNJyIiorqhzgcZIiIiqrsYZIiIiEi1GGSIiIhItRhkiIiISLUYZIiIiEi1GGSIiIhItRhkiIiISLUYZIiIiEi1GGSIiIhItRhkiIiISLUYZIiIiEi1GGSIiIhItRhkiIiISLUYZIiIiEi1GGSIiIhItRhkiIiISLW8lS6AiIhICYmJiUhLS1O6jBsKDg5G06ZNlS7DozHIEBFRvZOYmIjY2FhYLBalS7khs9mMhIQEhpkbYJAhIqJ6Jy0tDRaLBZ+/8y5io2OULqdMCadPYdTk55CWlsYgcwMMMkREVG/FRsega/sOSpdB1cDBvkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyREREpFoMMkRERKRaDDJERESkWgwyRERE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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "Ai1kju9k_orj",
        "outputId": "4b1747e8-12ce-40a4-955a-f477549ce39f"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7   \n",
              "..        ...       ...        ...              ...          ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7   \n",
              "\n",
              "     Waiting_Time  User_Transaction_Amount  User_Purchase_Frequency  \\\n",
              "1              16                      439                        7   \n",
              "3              37                      227                        5   \n",
              "7              30                      459                        9   \n",
              "9              52                      127                        7   \n",
              "11             13                      406                       10   \n",
              "..            ...                      ...                      ...   \n",
              "993            31                      242                       10   \n",
              "994            32                      307                       10   \n",
              "995            32                      188                        1   \n",
              "996            56                      276                        7   \n",
              "999            55                      323                        9   \n",
              "\n",
              "    Logistics_Delay_Reason  Asset_Utilization  Demand_Forecast  \\\n",
              "1                  Weather               80.9              174   \n",
              "3                  Traffic               97.4              160   \n",
              "7                  Traffic               73.8              253   \n",
              "9       Mechanical Failure               63.1              224   \n",
              "11                 Traffic               85.5              238   \n",
              "..                     ...                ...              ...   \n",
              "993                Weather               95.6              221   \n",
              "994                Traffic               64.0              168   \n",
              "995                Weather               79.2              213   \n",
              "996                Weather               83.7              272   \n",
              "999     Mechanical Failure               81.3              141   \n",
              "\n",
              "     Logistics_Delay  \n",
              "1                  1  \n",
              "3                  1  \n",
              "7                  0  \n",
              "9                  0  \n",
              "11                 0  \n",
              "..               ...  \n",
              "993                1  \n",
              "994                0  \n",
              "995                1  \n",
              "996                0  \n",
              "999                1  \n",
              "\n",
              "[737 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3789d1f4-8900-4d5c-8c9e-bd49bcab9300\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>User_Purchase_Frequency</th>\n",
              "      <th>Logistics_Delay_Reason</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>5</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>9</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>7</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>10</td>\n",
              "      <td>Weather</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>10</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>1</td>\n",
              "      <td>Weather</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>7</td>\n",
              "      <td>Weather</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>9</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3789d1f4-8900-4d5c-8c9e-bd49bcab9300')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3789d1f4-8900-4d5c-8c9e-bd49bcab9300 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3789d1f4-8900-4d5c-8c9e-bd49bcab9300');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-441dc11a-2966-4dfb-9ec0-74848fdfe470\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-441dc11a-2966-4dfb-9ec0-74848fdfe470')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-441dc11a-2966-4dfb-9ec0-74848fdfe470 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0c36db28-b0f4-4a19-b9e9-9a217e28307e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0c36db28-b0f4-4a19-b9e9-9a217e28307e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Purchase_Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay_Reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Weather\",\n          \"Traffic\",\n          \"Mechanical Failure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand_Forecast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 100,\n        \"max\": 300,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          277,\n          101,\n          143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*User_Transaction_Amount*"
      ],
      "metadata": {
        "id": "nqSbmrcA_mAF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"User_Transaction_Amount\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rfN_mxa7_qrB",
        "outputId": "4ab52374-d3d7-45b1-f27a-dffb8cfb1fcd"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([439, 227, 459, 127, 406, 215, 320, 487, 298, 315, 174, 152, 396,\n",
              "       354, 121, 220, 184, 392, 209, 235, 292, 475, 311, 201, 310, 379,\n",
              "       274, 308, 232, 282, 258, 425, 424, 467, 139, 456, 205, 173, 154,\n",
              "       191, 100, 193, 418, 378, 370, 496, 415, 167, 485, 344, 219, 486,\n",
              "       214, 267, 451, 268, 244, 432, 366, 330, 410, 468, 225, 120, 377,\n",
              "       335, 302, 416, 340, 145, 243, 180, 111, 187, 156, 421, 325, 189,\n",
              "       138, 345, 246, 247, 204, 461, 499, 155, 261, 390, 464, 482, 312,\n",
              "       447, 341, 106, 101, 226, 140, 413, 323, 238, 233, 181, 319, 490,\n",
              "       321, 318, 257, 229, 497, 287, 266, 466, 358, 494, 305, 168, 210,\n",
              "       481, 423, 231, 360, 419, 107, 195, 112, 309, 477, 146, 463, 103,\n",
              "       170, 393, 367, 141, 104, 213, 242, 473, 389, 124, 332, 384, 448,\n",
              "       317, 126, 216, 251, 363, 342, 108, 336, 495, 188, 236, 147, 295,\n",
              "       197, 417, 125, 348, 347, 472, 498, 476, 414, 196, 259, 454, 202,\n",
              "       437, 115, 409, 453, 134, 402, 484, 314, 151, 211, 349, 372, 445,\n",
              "       303, 368, 465, 163, 460, 491, 185, 291, 280, 329, 400, 362, 338,\n",
              "       129, 137, 478, 271, 398, 442, 286, 373, 300, 182, 118, 408, 237,\n",
              "       388, 149, 382, 375, 452, 171, 444, 440, 474, 455, 166, 256, 203,\n",
              "       479, 339, 343, 113, 144, 135, 443, 142, 364, 192, 260, 262, 359,\n",
              "       153, 429, 293, 283, 160, 177, 264, 365, 114, 430, 381, 157, 333,\n",
              "       458, 199, 284, 399, 109, 297, 161, 350, 175, 207, 277, 301, 322,\n",
              "       357, 158, 492, 159, 230, 431, 179, 183, 369, 353, 405, 276, 228,\n",
              "       306, 272, 385, 123, 281, 190, 395, 253, 102, 241, 316, 446, 165,\n",
              "       404, 327, 457, 223, 480, 234, 279, 462, 307, 263, 289, 172, 386,\n",
              "       122, 162, 240, 290, 352, 143, 222, 131, 387, 427, 450, 361, 136,\n",
              "       380, 401, 194, 469, 128, 265, 176, 483, 198, 255, 130, 324, 254,\n",
              "       407, 334, 488, 428, 500, 245, 105, 148, 449])"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.histplot(df['User_Transaction_Amount'], kde = True, color = 'pink')\n",
        "plt.xlabel('Transacción')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Distribucion de Transacción')\n",
        "\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['top'].set_visible(False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "em1FR_RC_wAH",
        "outputId": "a5eeb387-df35-4931-8584-1ba5924345dc"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*User_Purchase_Frequency*"
      ],
      "metadata": {
        "id": "mKnAVc04_2Zm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"User_Purchase_Frequency\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8HjqCgEx_yOS",
        "outputId": "e4d2823c-ce19-458b-c836-080d40138efb"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 7,  5,  9, 10,  3,  4,  1,  2,  6,  8])"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "modelo=smf.ols(\"Waiting_Time ~ C(User_Purchase_Frequency)\",data=df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo)\n",
        "tabla_anova\n",
        "\n",
        "#Se rechaza la hipotesis nula"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "lz7LSTgf_66i",
        "outputId": "79525bc0-3b01-46ec-f8af-b63f57b1235b"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                               df         sum_sq     mean_sq         F  \\\n",
              "C(User_Purchase_Frequency)    9.0    3144.428059  349.380895  1.709342   \n",
              "Residual                    727.0  148595.126893  204.394948       NaN   \n",
              "\n",
              "                              PR(>F)  \n",
              "C(User_Purchase_Frequency)  0.083103  \n",
              "Residual                         NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8aa2c937-abce-4d97-90a9-88fabd823934\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(User_Purchase_Frequency)</th>\n",
              "      <td>9.0</td>\n",
              "      <td>3144.428059</td>\n",
              "      <td>349.380895</td>\n",
              "      <td>1.709342</td>\n",
              "      <td>0.083103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>727.0</td>\n",
              "      <td>148595.126893</td>\n",
              "      <td>204.394948</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8aa2c937-abce-4d97-90a9-88fabd823934')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8aa2c937-abce-4d97-90a9-88fabd823934 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8aa2c937-abce-4d97-90a9-88fabd823934');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fe7ff704-5b63-46d9-9b3b-b345112e14fd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe7ff704-5b63-46d9-9b3b-b345112e14fd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fe7ff704-5b63-46d9-9b3b-b345112e14fd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e97d1b1d-1c7d-44d9-bbb9-28ee1fb35360\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e97d1b1d-1c7d-44d9-bbb9-28ee1fb35360 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 507.70266889194113,\n        \"min\": 9.0,\n        \"max\": 727.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          727.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102849.17547415568,\n        \"min\": 3144.428059034455,\n        \"max\": 148595.1268934757,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          148595.1268934757,\n          3144.428059034455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.52054691167628,\n        \"min\": 204.39494758387306,\n        \"max\": 349.3808954482728,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          204.39494758387306,\n          349.3808954482728\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7093421318787982,\n        \"max\": 1.7093421318787982,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7093421318787982\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0831034871478478,\n        \"max\": 0.0831034871478478,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0831034871478478\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns = [\"User_Purchase_Frequency\"], inplace = True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "ppnfCQ4c_9_q",
        "outputId": "a708de65-1dd1-4d36-996c-27130150bbf5"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7   \n",
              "..        ...       ...        ...              ...          ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7   \n",
              "\n",
              "     Waiting_Time  User_Transaction_Amount Logistics_Delay_Reason  \\\n",
              "1              16                      439                Weather   \n",
              "3              37                      227                Traffic   \n",
              "7              30                      459                Traffic   \n",
              "9              52                      127     Mechanical Failure   \n",
              "11             13                      406                Traffic   \n",
              "..            ...                      ...                    ...   \n",
              "993            31                      242                Weather   \n",
              "994            32                      307                Traffic   \n",
              "995            32                      188                Weather   \n",
              "996            56                      276                Weather   \n",
              "999            55                      323     Mechanical Failure   \n",
              "\n",
              "     Asset_Utilization  Demand_Forecast  Logistics_Delay  \n",
              "1                 80.9              174                1  \n",
              "3                 97.4              160                1  \n",
              "7                 73.8              253                0  \n",
              "9                 63.1              224                0  \n",
              "11                85.5              238                0  \n",
              "..                 ...              ...              ...  \n",
              "993               95.6              221                1  \n",
              "994               64.0              168                0  \n",
              "995               79.2              213                1  \n",
              "996               83.7              272                0  \n",
              "999               81.3              141                1  \n",
              "\n",
              "[737 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-83beb247-fcda-4ec4-b71a-dbf628fa29cc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>Logistics_Delay_Reason</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>Weather</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>Weather</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>Traffic</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>Weather</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>Weather</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>Mechanical Failure</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83beb247-fcda-4ec4-b71a-dbf628fa29cc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-83beb247-fcda-4ec4-b71a-dbf628fa29cc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-83beb247-fcda-4ec4-b71a-dbf628fa29cc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aa6f9938-51bc-4044-ad54-76448a302564\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aa6f9938-51bc-4044-ad54-76448a302564')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aa6f9938-51bc-4044-ad54-76448a302564 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_583e3ad6-e154-4c6e-bd63-2ae04362fb7f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_583e3ad6-e154-4c6e-bd63-2ae04362fb7f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay_Reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Weather\",\n          \"Traffic\",\n          \"Mechanical Failure\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand_Forecast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 100,\n        \"max\": 300,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          277,\n          101,\n          143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Logistics_Delay_Reason*"
      ],
      "metadata": {
        "id": "RTT2DDtrABmt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Logistics_Delay_Reason\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1yg68biW_9Yt",
        "outputId": "9808a201-d200-4f1b-fd1b-a93b7cf44e60"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Weather', 'Traffic', 'Mechanical Failure'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "modelo=smf.ols(\"Waiting_Time ~ C(Logistics_Delay_Reason)\",data=df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo)\n",
        "tabla_anova\n",
        "\n",
        "#No hay evidencia suficiente"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "XO5tBsYpAGv9",
        "outputId": "eedc31d8-819a-44ec-e081-2701fef86054"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              df         sum_sq     mean_sq         F  \\\n",
              "C(Logistics_Delay_Reason)    2.0     430.598291  215.299145  1.044417   \n",
              "Residual                   734.0  151308.956662  206.142993       NaN   \n",
              "\n",
              "                             PR(>F)  \n",
              "C(Logistics_Delay_Reason)  0.352419  \n",
              "Residual                        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-25838eb1-c9de-43ca-b663-eced3f614663\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(Logistics_Delay_Reason)</th>\n",
              "      <td>2.0</td>\n",
              "      <td>430.598291</td>\n",
              "      <td>215.299145</td>\n",
              "      <td>1.044417</td>\n",
              "      <td>0.352419</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>734.0</td>\n",
              "      <td>151308.956662</td>\n",
              "      <td>206.142993</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25838eb1-c9de-43ca-b663-eced3f614663')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-25838eb1-c9de-43ca-b663-eced3f614663 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-25838eb1-c9de-43ca-b663-eced3f614663');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4afc56de-5391-4270-a6f2-cbb7f9282cad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4afc56de-5391-4270-a6f2-cbb7f9282cad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4afc56de-5391-4270-a6f2-cbb7f9282cad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_296295d8-8a8a-42f6-ac0e-27045745a6fe\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_296295d8-8a8a-42f6-ac0e-27045745a6fe button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 517.6021638285528,\n        \"min\": 2.0,\n        \"max\": 734.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          734.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106687.11033862966,\n        \"min\": 430.59829061263986,\n        \"max\": 151308.95666189757,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          151308.95666189757,\n          430.59829061263986\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.474377578146493,\n        \"min\": 206.14299272738089,\n        \"max\": 215.29914530631993,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          206.14299272738089,\n          215.29914530631993\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0444165113632935,\n        \"max\": 1.0444165113632935,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0444165113632935\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.3524194430082501,\n        \"max\": 0.3524194430082501,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.3524194430082501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns = [\"Logistics_Delay_Reason\"], inplace = True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "PEmKKch6AJeP",
        "outputId": "7c54be32-f710-4307-8236-3a20d70e063d"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7   \n",
              "..        ...       ...        ...              ...          ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7   \n",
              "\n",
              "     Waiting_Time  User_Transaction_Amount  Asset_Utilization  \\\n",
              "1              16                      439               80.9   \n",
              "3              37                      227               97.4   \n",
              "7              30                      459               73.8   \n",
              "9              52                      127               63.1   \n",
              "11             13                      406               85.5   \n",
              "..            ...                      ...                ...   \n",
              "993            31                      242               95.6   \n",
              "994            32                      307               64.0   \n",
              "995            32                      188               79.2   \n",
              "996            56                      276               83.7   \n",
              "999            55                      323               81.3   \n",
              "\n",
              "     Demand_Forecast  Logistics_Delay  \n",
              "1                174                1  \n",
              "3                160                1  \n",
              "7                253                0  \n",
              "9                224                0  \n",
              "11               238                0  \n",
              "..               ...              ...  \n",
              "993              221                1  \n",
              "994              168                0  \n",
              "995              213                1  \n",
              "996              272                0  \n",
              "999              141                1  \n",
              "\n",
              "[737 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9009e4b2-60c0-498e-abc2-dd3aa7407b8a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Demand_Forecast</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>80.9</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>97.4</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>73.8</td>\n",
              "      <td>253</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>63.1</td>\n",
              "      <td>224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>85.5</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>95.6</td>\n",
              "      <td>221</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>64.0</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>79.2</td>\n",
              "      <td>213</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>83.7</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>81.3</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9009e4b2-60c0-498e-abc2-dd3aa7407b8a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9009e4b2-60c0-498e-abc2-dd3aa7407b8a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9009e4b2-60c0-498e-abc2-dd3aa7407b8a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cf90f94d-4154-48b8-b338-71845399481d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf90f94d-4154-48b8-b338-71845399481d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cf90f94d-4154-48b8-b338-71845399481d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_de248ef1-6871-48df-b5b8-d3fda000bbc6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_de248ef1-6871-48df-b5b8-d3fda000bbc6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Demand_Forecast\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59,\n        \"min\": 100,\n        \"max\": 300,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          277,\n          101,\n          143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Asset_Utilization*"
      ],
      "metadata": {
        "id": "AJbf5Lw0AMzy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.histplot(df['Asset_Utilization'], kde = True, color = 'pink')\n",
        "plt.xlabel('Transacción')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Distribucion de Transacción')\n",
        "\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['top'].set_visible(False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "WIDj626sAOPy",
        "outputId": "b47f9ef0-d9ff-48ef-9574-d1d89a4fb869"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Demand_Forecast*"
      ],
      "metadata": {
        "id": "uSuY0IymAXku"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Demand_Forecast\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bTJ4r3zIAYhk",
        "outputId": "b87dc533-2b1b-4830-caac-4ffa2dd8f898"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([174, 160, 253, 224, 238, 114, 231, 256, 170, 248, 195, 235, 135,\n",
              "       282, 262, 101, 155, 240, 242, 205, 222, 266, 255, 129, 183, 209,\n",
              "       113, 265, 154, 289, 143, 128, 127, 290, 169, 241, 236, 260, 182,\n",
              "       212, 254, 264, 225, 204, 172, 245, 252, 211, 156, 151, 105, 125,\n",
              "       214, 217, 165, 136, 233, 137, 150, 140, 298, 141, 263, 223, 285,\n",
              "       273, 296, 100, 106, 284, 226, 149, 181, 109, 177, 184, 220, 111,\n",
              "       281, 126, 110, 107, 294, 189, 152, 145, 270, 118, 230, 117, 115,\n",
              "       191, 208, 166, 131, 277, 186, 272, 175, 158, 162, 138, 246, 179,\n",
              "       201, 102, 257, 116, 130, 237, 112, 206, 286, 139, 147, 229, 249,\n",
              "       269, 213, 271, 124, 279, 185, 292, 188, 200, 268, 221, 198, 261,\n",
              "       104, 219, 259, 247, 146, 288, 133, 176, 228, 134, 234, 196, 197,\n",
              "       123, 187, 251, 280, 132, 171, 192, 244, 300, 203, 122, 215, 297,\n",
              "       199, 164, 103, 159, 163, 207, 168, 274, 173, 202, 291, 108, 180,\n",
              "       142, 239, 299, 287, 283, 276, 157, 243, 119, 120, 190, 210, 267,\n",
              "       144, 194, 293, 161, 275, 153, 167, 218, 278, 193, 232, 295, 216,\n",
              "       148, 178, 227, 250, 258])"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "modelo=smf.ols(\"Waiting_Time ~ C(Demand_Forecast)\",data=df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo)\n",
        "tabla_anova\n",
        "\n",
        "#No hay datos suficientes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "VuRwbFaNAc8P",
        "outputId": "16951ab9-e834-465f-cfe7-879974c9b9eb"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       df         sum_sq     mean_sq         F   PR(>F)\n",
              "C(Demand_Forecast)  199.0   45875.589476  230.530600  1.169377  0.08601\n",
              "Residual            537.0  105863.965476  197.139601       NaN      NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-256a8dae-5504-440d-bb03-db499efb9a2d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(Demand_Forecast)</th>\n",
              "      <td>199.0</td>\n",
              "      <td>45875.589476</td>\n",
              "      <td>230.530600</td>\n",
              "      <td>1.169377</td>\n",
              "      <td>0.08601</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>537.0</td>\n",
              "      <td>105863.965476</td>\n",
              "      <td>197.139601</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-256a8dae-5504-440d-bb03-db499efb9a2d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-256a8dae-5504-440d-bb03-db499efb9a2d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-256a8dae-5504-440d-bb03-db499efb9a2d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-93f895e0-e1cc-4e54-917d-b89d5815198c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-93f895e0-e1cc-4e54-917d-b89d5815198c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-93f895e0-e1cc-4e54-917d-b89d5815198c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_dec61fd2-90e2-42fd-a50b-6779ffdacac9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_dec61fd2-90e2-42fd-a50b-6779ffdacac9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 239.00209204105306,\n        \"min\": 199.0,\n        \"max\": 537.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          537.0,\n          199.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42418.18746187698,\n        \"min\": 45875.58947631967,\n        \"max\": 105863.96547619047,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          105863.96547619047,\n          45875.58947631967\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.611002438106734,\n        \"min\": 197.13960051432116,\n        \"max\": 230.53060038351592,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          197.13960051432116,\n          230.53060038351592\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.1693774349855655,\n        \"max\": 1.1693774349855655,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.1693774349855655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.08600964668758433,\n        \"max\": 0.08600964668758433,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.08600964668758433\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns = [\"Demand_Forecast\"], inplace = True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "xJ9gfNSoAc2O",
        "outputId": "bfc65752-7bad-42a5-a651-717d98e165dd"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7   \n",
              "..        ...       ...        ...              ...          ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7   \n",
              "\n",
              "     Waiting_Time  User_Transaction_Amount  Asset_Utilization  Logistics_Delay  \n",
              "1              16                      439               80.9                1  \n",
              "3              37                      227               97.4                1  \n",
              "7              30                      459               73.8                0  \n",
              "9              52                      127               63.1                0  \n",
              "11             13                      406               85.5                0  \n",
              "..            ...                      ...                ...              ...  \n",
              "993            31                      242               95.6                1  \n",
              "994            32                      307               64.0                0  \n",
              "995            32                      188               79.2                1  \n",
              "996            56                      276               83.7                0  \n",
              "999            55                      323               81.3                1  \n",
              "\n",
              "[737 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ce6fb1a5-c95a-41e2-880d-38558081680b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "      <th>Logistics_Delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>80.9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>97.4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>73.8</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>63.1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>85.5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>95.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>64.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>79.2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>83.7</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>81.3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce6fb1a5-c95a-41e2-880d-38558081680b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ce6fb1a5-c95a-41e2-880d-38558081680b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ce6fb1a5-c95a-41e2-880d-38558081680b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d6d446d2-680e-403b-a78b-045738168335\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6d446d2-680e-403b-a78b-045738168335')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d6d446d2-680e-403b-a78b-045738168335 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8ee467f8-112c-4fc6-a968-4cc08451e9b7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8ee467f8-112c-4fc6-a968-4cc08451e9b7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Logistics_Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Logistics_Delay*"
      ],
      "metadata": {
        "id": "gI8FZQIsAi8y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Logistics_Delay\"].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZGI-W0R9AjIm",
        "outputId": "b039e9ae-89f5-424f-ccd0-7bf8aa5bdfe2"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "modelo=smf.ols(\"Waiting_Time ~ C(Logistics_Delay)\",data=df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo)\n",
        "tabla_anova"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "ujAg2jgWAqJc",
        "outputId": "66ed6076-edab-442b-fcb5-d8db7b3b9594"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       df         sum_sq     mean_sq         F    PR(>F)\n",
              "C(Logistics_Delay)    1.0     532.543800  532.543800  2.588635  0.108062\n",
              "Residual            735.0  151207.011153  205.723825       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-34e4ea5c-cd92-4544-aa37-ae5f94503ce4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C(Logistics_Delay)</th>\n",
              "      <td>1.0</td>\n",
              "      <td>532.543800</td>\n",
              "      <td>532.543800</td>\n",
              "      <td>2.588635</td>\n",
              "      <td>0.108062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>735.0</td>\n",
              "      <td>151207.011153</td>\n",
              "      <td>205.723825</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34e4ea5c-cd92-4544-aa37-ae5f94503ce4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-34e4ea5c-cd92-4544-aa37-ae5f94503ce4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-34e4ea5c-cd92-4544-aa37-ae5f94503ce4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e0085fba-e716-4194-82f8-ffd13d52d5c6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e0085fba-e716-4194-82f8-ffd13d52d5c6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e0085fba-e716-4194-82f8-ffd13d52d5c6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bbe0dce4-bbda-4c1e-9c70-e31c12dc5a10\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bbe0dce4-bbda-4c1e-9c70-e31c12dc5a10 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 519.0163773909259,\n        \"min\": 1.0,\n        \"max\": 735.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          735.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106542.93761681399,\n        \"min\": 532.5437998706329,\n        \"max\": 151207.01115263958,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          151207.01115263958,\n          532.5437998706329\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 231.09662067216345,\n        \"min\": 205.7238246974688,\n        \"max\": 532.5437998706329,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          205.7238246974688,\n          532.5437998706329\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.58863454757258,\n        \"max\": 2.58863454757258,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.58863454757258\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.10806249528248917,\n        \"max\": 0.10806249528248917,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.10806249528248917\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns = [\"Logistics_Delay\"], inplace = True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "0SxDMKu5As4H",
        "outputId": "799e0ce0-92cb-4fcf-d2df-a38734bcb13f"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Asset_ID  Latitude  Longitude  Inventory_Level  Temperature  \\\n",
              "1     Truck_6   22.2748  -131.7086              491         22.5   \n",
              "3     Truck_9   42.3900    -1.4788              330         25.4   \n",
              "7     Truck_9   46.5643  -126.5348              222         23.3   \n",
              "9     Truck_2   54.1683  -135.2676              389         21.9   \n",
              "11   Truck_10  -25.2768   156.1262              234         29.7   \n",
              "..        ...       ...        ...              ...          ...   \n",
              "993   Truck_4   46.9729   -36.5198              420         21.6   \n",
              "994   Truck_1   44.2477   175.0702              143         21.6   \n",
              "995   Truck_6   89.8701    73.6867              264         26.9   \n",
              "996   Truck_5  -10.4792  -177.1239              479         23.7   \n",
              "999   Truck_8   59.8356  -114.4198              157         18.7   \n",
              "\n",
              "     Waiting_Time  User_Transaction_Amount  Asset_Utilization  \n",
              "1              16                      439               80.9  \n",
              "3              37                      227               97.4  \n",
              "7              30                      459               73.8  \n",
              "9              52                      127               63.1  \n",
              "11             13                      406               85.5  \n",
              "..            ...                      ...                ...  \n",
              "993            31                      242               95.6  \n",
              "994            32                      307               64.0  \n",
              "995            32                      188               79.2  \n",
              "996            56                      276               83.7  \n",
              "999            55                      323               81.3  \n",
              "\n",
              "[737 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-53efdc1d-4c1a-4403-8935-f31243fc244c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Asset_ID</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Inventory_Level</th>\n",
              "      <th>Temperature</th>\n",
              "      <th>Waiting_Time</th>\n",
              "      <th>User_Transaction_Amount</th>\n",
              "      <th>Asset_Utilization</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>22.2748</td>\n",
              "      <td>-131.7086</td>\n",
              "      <td>491</td>\n",
              "      <td>22.5</td>\n",
              "      <td>16</td>\n",
              "      <td>439</td>\n",
              "      <td>80.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>42.3900</td>\n",
              "      <td>-1.4788</td>\n",
              "      <td>330</td>\n",
              "      <td>25.4</td>\n",
              "      <td>37</td>\n",
              "      <td>227</td>\n",
              "      <td>97.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Truck_9</td>\n",
              "      <td>46.5643</td>\n",
              "      <td>-126.5348</td>\n",
              "      <td>222</td>\n",
              "      <td>23.3</td>\n",
              "      <td>30</td>\n",
              "      <td>459</td>\n",
              "      <td>73.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Truck_2</td>\n",
              "      <td>54.1683</td>\n",
              "      <td>-135.2676</td>\n",
              "      <td>389</td>\n",
              "      <td>21.9</td>\n",
              "      <td>52</td>\n",
              "      <td>127</td>\n",
              "      <td>63.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Truck_10</td>\n",
              "      <td>-25.2768</td>\n",
              "      <td>156.1262</td>\n",
              "      <td>234</td>\n",
              "      <td>29.7</td>\n",
              "      <td>13</td>\n",
              "      <td>406</td>\n",
              "      <td>85.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>993</th>\n",
              "      <td>Truck_4</td>\n",
              "      <td>46.9729</td>\n",
              "      <td>-36.5198</td>\n",
              "      <td>420</td>\n",
              "      <td>21.6</td>\n",
              "      <td>31</td>\n",
              "      <td>242</td>\n",
              "      <td>95.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>Truck_1</td>\n",
              "      <td>44.2477</td>\n",
              "      <td>175.0702</td>\n",
              "      <td>143</td>\n",
              "      <td>21.6</td>\n",
              "      <td>32</td>\n",
              "      <td>307</td>\n",
              "      <td>64.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Truck_6</td>\n",
              "      <td>89.8701</td>\n",
              "      <td>73.6867</td>\n",
              "      <td>264</td>\n",
              "      <td>26.9</td>\n",
              "      <td>32</td>\n",
              "      <td>188</td>\n",
              "      <td>79.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Truck_5</td>\n",
              "      <td>-10.4792</td>\n",
              "      <td>-177.1239</td>\n",
              "      <td>479</td>\n",
              "      <td>23.7</td>\n",
              "      <td>56</td>\n",
              "      <td>276</td>\n",
              "      <td>83.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Truck_8</td>\n",
              "      <td>59.8356</td>\n",
              "      <td>-114.4198</td>\n",
              "      <td>157</td>\n",
              "      <td>18.7</td>\n",
              "      <td>55</td>\n",
              "      <td>323</td>\n",
              "      <td>81.3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>737 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53efdc1d-4c1a-4403-8935-f31243fc244c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-53efdc1d-4c1a-4403-8935-f31243fc244c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-53efdc1d-4c1a-4403-8935-f31243fc244c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f6a44175-9242-4a3b-a3e7-5da2ac43c960\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6a44175-9242-4a3b-a3e7-5da2ac43c960')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f6a44175-9242-4a3b-a3e7-5da2ac43c960 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d8922100-c3d7-4e38-bd5a-91827fd77d32\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d8922100-c3d7-4e38-bd5a-91827fd77d32 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 737,\n  \"fields\": [\n    {\n      \"column\": \"Asset_ID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Truck_1\",\n          \"Truck_9\",\n          \"Truck_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.880739902771765,\n        \"min\": -89.7915,\n        \"max\": 89.8701,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          79.8212,\n          67.396,\n          -81.5733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.17260895132753,\n        \"min\": -179.8202,\n        \"max\": 179.9237,\n        \"num_unique_values\": 737,\n        \"samples\": [\n          -21.6975,\n          170.1537,\n          -17.3787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          245,\n          376,\n          489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3057135865176748,\n        \"min\": 18.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          29.2,\n          22.8,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Waiting_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 60,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          36,\n          44,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"User_Transaction_Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118,\n        \"min\": 100,\n        \"max\": 500,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          379,\n          450,\n          187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asset_Utilization\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.506164838032841,\n        \"min\": 60.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 337,\n        \"samples\": [\n          96.8,\n          79.1,\n          69.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Mapa de calor*"
      ],
      "metadata": {
        "id": "NuYOaKNFAv-h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "correlation_matrix = df.corr()\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", square=True, cbar_kws={\"shrink\": .8})\n",
        "plt.title('Mapa de Calor de la Matriz de Correlación')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 372
        },
        "id": "be5pgpjbAxRl",
        "outputId": "7abc7e01-4aec-4019-bb7c-451d93422a73"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "could not convert string to float: 'Truck_6'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-75-cc5a1b95765e>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mcorrelation_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrelation_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'coolwarm'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfmt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\".2f\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msquare\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar_kws\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"shrink\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m.8\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mcorr\u001b[0;34m(self, method, min_periods, numeric_only)\u001b[0m\n\u001b[1;32m  11047\u001b[0m         \u001b[0mcols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11048\u001b[0m         \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m> 11049\u001b[0;31m         \u001b[0mmat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  11050\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11051\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"pearson\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mto_numpy\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1991\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1992\u001b[0m             \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1993\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1994\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1995\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mas_array\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1692\u001b[0m                 \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriteable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1693\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1694\u001b[0;31m             \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interleave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1695\u001b[0m             \u001b[0;31m# The underlying data was copied within _interleave, so no need\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1696\u001b[0m             \u001b[0;31m# to further copy if copy=True or setting na_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_interleave\u001b[0;34m(self, dtype, na_value)\u001b[0m\n\u001b[1;32m   1751\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1752\u001b[0m                 \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1753\u001b[0;31m             \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1754\u001b[0m             \u001b[0mitemmask\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1755\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'Truck_6'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import r2_score\n",
        "import statsmodels.api as sm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "X = df[['Latitude',\t'Longitude',\t'Inventory_Level',\t'Temperature']]\n",
        "Y = df[\"Waiting_Time\"]\n",
        "\n",
        "# Datos de entrenamiento y datos de prueba\n",
        "\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)\n",
        "\n",
        "X_train_constante = sm.add_constant(X_train)\n",
        "X_test_constante = sm.add_constant(X_test)\n",
        "\n",
        "modelo = sm.OLS(Y_train, X_train_constante).fit()\n",
        "\n",
        "\n",
        "Yc = modelo.predict(X_test_constante)\n",
        "\n",
        "plt.scatter(Y_test, Yc)\n",
        "\n",
        "r2 = r2_score(Y_test, Yc)\n",
        "print(f'Coeficiente de correlacion: {r2: 0.4f}\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "yUMGRireBQE8",
        "outputId": "75a1b804-53d1-42b9-ed5c-9bdeb1e1a003"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coeficiente de correlacion: -0.0109\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b0, b1, b2, b3, b4 = modelo.params\n",
        "\n",
        "Fun = lambda x1, x2, x3, x4: b0 + b1 * x1 + b2 * x2 + b3 * x3 + b4 * x4\n",
        "\n",
        "#si se trata de un modelo de predicción de demanda, un modelo de tiempo de espera\n",
        "Fun(432, 60, 2, 120000)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ghHat26cBUrv",
        "outputId": "62dc6f8a-f38a-4d28-fb20-1891053eb7fe"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13035.647927918895"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.formula.api import ols\n",
        "\n",
        "moedo_2 = ols(formula = \"Waiting_Time ~ Latitude + Longitude + Inventory_Level + Temperature\", data = df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(moedo_2, typ = 2)\n",
        "tabla_anova"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "LtxXXoy-BW0L",
        "outputId": "c8339b3c-fedf-4d59-c6a3-3e5f5b9ea6a1"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        sum_sq     df         F    PR(>F)\n",
              "Latitude              2.349989    1.0  0.011346  0.915202\n",
              "Longitude             0.000397    1.0  0.000002  0.998896\n",
              "Inventory_Level       2.526366    1.0  0.012197  0.912090\n",
              "Temperature         115.063561    1.0  0.555520  0.456310\n",
              "Residual         151617.470315  732.0       NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4ffb720-89a4-4429-85dc-b47ce07ac462\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>df</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Latitude</th>\n",
              "      <td>2.349989</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.011346</td>\n",
              "      <td>0.915202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Longitude</th>\n",
              "      <td>0.000397</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000002</td>\n",
              "      <td>0.998896</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Inventory_Level</th>\n",
              "      <td>2.526366</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.012197</td>\n",
              "      <td>0.912090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temperature</th>\n",
              "      <td>115.063561</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.555520</td>\n",
              "      <td>0.456310</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>151617.470315</td>\n",
              "      <td>732.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4ffb720-89a4-4429-85dc-b47ce07ac462')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4ffb720-89a4-4429-85dc-b47ce07ac462 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4ffb720-89a4-4429-85dc-b47ce07ac462');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-295da433-4580-40e6-bd0a-bcf494fe158a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-295da433-4580-40e6-bd0a-bcf494fe158a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-295da433-4580-40e6-bd0a-bcf494fe158a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_90ce1784-4f2b-4c89-8d01-1f19e9af2b54\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_90ce1784-4f2b-4c89-8d01-1f19e9af2b54 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67792.00210810243,\n        \"min\": 0.00039650561473066206,\n        \"max\": 151617.47031456736,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.00039650561473066206,\n          151617.47031456736,\n          2.5263662776352658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 326.9131383104692,\n        \"min\": 1.0,\n        \"max\": 732.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          732.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27389227577424624,\n        \"min\": 1.9143051877904748e-06,\n        \"max\": 0.555519932206335,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.9143051877904748e-06,\n          0.555519932206335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2461819823867176,\n        \"min\": 0.4563102302682145,\n        \"max\": 0.9988964368460875,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9988964368460875,\n          0.4563102302682145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El valor P (PR(>F)) representa la probabilidad de que los resultados observados ocurran si la hipótesis nula, que supone que la variable independiente no tiene efecto, fuera cierto.\n",
        "\n",
        "Generalmente, un valor P inferior a 0.05 se considera estadísticamente significativo, lo que implica que la variable independiente ejerce un efecto notable sobre la variable dependiente (tiempo de espera).\n",
        "\n",
        "En este escenario, los valores P de todas las variables independientes (latitud, longitud, nivel de inventario y temperatura) superan ampliamente el umbral de 0,05.\n",
        "\n",
        "Esto sugiere que ninguna de estas variables influye de manera estadísticamente significativa en el tiempo de espera.\n",
        "\n",
        "En consecuencia, se puede concluir que el modelo no logra predecir el tiempo de espera de manera efectiva utilizando estas variables.\n",
        "\n",
        "Para mejorar la capacidad predictiva del modelo, se deben explorar otras variables independientes o técnicas de modelado alternativas.\n",
        "\n",
        "Es crucial destacar que la abreviatura NaN, que significa \"No es un Número\", en el contexto de los residuos, no aporta información útil para la comparación entre las variables independientes."
      ],
      "metadata": {
        "id": "H5TpO-qQBq1D"
      }
    }
  ]
}